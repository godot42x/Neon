#pragma once

#include <Core/Log.h>

#include <vulkan/vulkan.h>

#include "Render/Render.h"
struct VulkanUtils
{
    static bool hasStencilComponent(VkFormat format);

    static uint32_t findMemoryType(VkPhysicalDevice physicalDevice,
                                   uint32_t typeFilter, VkMemoryPropertyFlags properties);

    static bool createBuffer(VkDevice device, VkPhysicalDevice physicalDevice,
                             VkDeviceSize size, VkBufferUsageFlags usage, VkMemoryPropertyFlags properties,
                             VkBuffer &outBuffer, VkDeviceMemory &outBufferMemory);

    static void createImage(VkDevice device, VkPhysicalDevice physicalDevice,
                            uint32_t width, uint32_t height, VkFormat format, VkImageTiling tiling, VkImageUsageFlags usageBits,
                            VkMemoryPropertyFlags properties, VkImage &image, VkDeviceMemory &imageMemory);

    static VkImageView createImageView(VkDevice device, VkImage image, VkFormat format, VkImageAspectFlags aspectFlags);

    static void transitionImageLayout(VkDevice device, VkCommandPool commandPool, VkQueue graphicsQueue,
                                      VkImage image, VkFormat format, VkImageLayout oldLayout, VkImageLayout newLayout);

    static void copyBufferToImage(VkDevice device, VkCommandPool commandPool, VkQueue graphicsQueue,
                                  VkBuffer buffer, VkImage image, uint32_t width, uint32_t height);

    static VkCommandBuffer beginSingleTimeCommands(VkDevice device, VkCommandPool commandPool);
    static void            endSingleTimeCommands(VkDevice device, VkCommandPool commandPool, VkQueue graphicsQueue, VkCommandBuffer commandBuffer);

    static void copyBuffer(VkDevice device, VkCommandPool commandPool, VkQueue graphicsQueue,
                           VkBuffer srcBuffer, VkBuffer dstBuffer, VkDeviceSize size);

    static VkFormat findSupportedImageFormat(VkPhysicalDevice             physicalDevice,
                                             const std::vector<VkFormat> &candidates,
                                             VkImageTiling                tiling,
                                             VkFormatFeatureFlags         features);

    static void createTextureImage(VkDevice device, VkPhysicalDevice physicalDevice, VkCommandPool commandPool, VkQueue graphicsQueue,
                                   const char *path, VkImage &outImage, VkDeviceMemory &outImageMemory);
};


namespace std
{
std::string to_string(VkResult v);
std::string to_string(VkFormat v);
std::string to_string(VkColorSpaceKHR v);
std::string to_string(VkPresentModeKHR v);
std::string to_string(VkSharingMode v);
} // namespace std

template <>
struct std::formatter<VkResult> : std::formatter<std::string>
{
    auto format(const VkResult &type, std::format_context &ctx) const
    {
        return std::format_to(ctx.out(), "{}({})", std::to_string(type), static_cast<int32_t>(type));
    }
};

#define VK_CALL(x)                                                       \
    do {                                                                 \
        VkResult result = (x);                                           \
        if (result != VK_SUCCESS) {                                      \
            NE_CORE_ERROR("Vulkan call failed with error: {} ", result); \
        }                                                                \
    } while (0)

#define VK_DESTROY(t, device, obj)          \
    if (obj != VK_NULL_HANDLE) {            \
        vkDestroy##t(device, obj, nullptr); \
        obj = VK_NULL_HANDLE;               \
    }

inline auto toVkImageLayout(EImageLayout::T layout) -> VkImageLayout
{
    switch (layout) {
    case EImageLayout::Undefined:
        return VK_IMAGE_LAYOUT_UNDEFINED;
    case EImageLayout::ColorAttachmentOptimal:
        return VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;
    case EImageLayout::DepthStencilAttachmentOptimal:
        return VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;
    case EImageLayout::ShaderReadOnlyOptimal:
        return VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;
    case EImageLayout::TransferSrcOptimal:
        return VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL;
    case EImageLayout::TransferDstOptimal:
        return VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;
    case EImageLayout::PresentSrcKHR:
        return VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;
    default:
        UNREACHABLE();
    }
    return VK_IMAGE_LAYOUT_UNDEFINED;
};



inline std::string std::to_string(VkResult result)
{
    switch (result) {
        CASE_ENUM_TO_STR(VK_SUCCESS);
        CASE_ENUM_TO_STR(VK_NOT_READY);
        CASE_ENUM_TO_STR(VK_TIMEOUT);
        CASE_ENUM_TO_STR(VK_EVENT_SET);
        CASE_ENUM_TO_STR(VK_EVENT_RESET);
        CASE_ENUM_TO_STR(VK_INCOMPLETE);
        CASE_ENUM_TO_STR(VK_ERROR_OUT_OF_HOST_MEMORY);
        CASE_ENUM_TO_STR(VK_ERROR_OUT_OF_DEVICE_MEMORY);
        CASE_ENUM_TO_STR(VK_ERROR_INITIALIZATION_FAILED);
        CASE_ENUM_TO_STR(VK_ERROR_DEVICE_LOST);
        CASE_ENUM_TO_STR(VK_ERROR_MEMORY_MAP_FAILED);
        CASE_ENUM_TO_STR(VK_ERROR_LAYER_NOT_PRESENT);
        CASE_ENUM_TO_STR(VK_ERROR_EXTENSION_NOT_PRESENT);
        CASE_ENUM_TO_STR(VK_ERROR_INCOMPATIBLE_DRIVER);
        CASE_ENUM_TO_STR(VK_ERROR_TOO_MANY_OBJECTS);
        CASE_ENUM_TO_STR(VK_ERROR_FORMAT_NOT_SUPPORTED);
        CASE_ENUM_TO_STR(VK_ERROR_FRAGMENTED_POOL);
        CASE_ENUM_TO_STR(VK_ERROR_UNKNOWN);
        CASE_ENUM_TO_STR(VK_ERROR_OUT_OF_POOL_MEMORY);
        CASE_ENUM_TO_STR(VK_ERROR_INVALID_EXTERNAL_HANDLE);
        CASE_ENUM_TO_STR(VK_ERROR_FRAGMENTATION);
        CASE_ENUM_TO_STR(VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS);
        CASE_ENUM_TO_STR(VK_PIPELINE_COMPILE_REQUIRED);
        CASE_ENUM_TO_STR(VK_ERROR_NOT_PERMITTED_EXT);
        CASE_ENUM_TO_STR(VK_ERROR_SURFACE_LOST_KHR);
        CASE_ENUM_TO_STR(VK_ERROR_NATIVE_WINDOW_IN_USE_KHR);
        CASE_ENUM_TO_STR(VK_SUBOPTIMAL_KHR);
        CASE_ENUM_TO_STR(VK_ERROR_OUT_OF_DATE_KHR);
        CASE_ENUM_TO_STR(VK_ERROR_INCOMPATIBLE_DISPLAY_KHR);
        CASE_ENUM_TO_STR(VK_ERROR_VALIDATION_FAILED_EXT);
        CASE_ENUM_TO_STR(VK_ERROR_INVALID_SHADER_NV);
        CASE_ENUM_TO_STR(VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR);
        CASE_ENUM_TO_STR(VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR);
        CASE_ENUM_TO_STR(VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR);
        CASE_ENUM_TO_STR(VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR);
        CASE_ENUM_TO_STR(VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR);
        CASE_ENUM_TO_STR(VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR);
        CASE_ENUM_TO_STR(VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT);
        CASE_ENUM_TO_STR(VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT);
        CASE_ENUM_TO_STR(VK_THREAD_IDLE_KHR);
        CASE_ENUM_TO_STR(VK_THREAD_DONE_KHR);
        CASE_ENUM_TO_STR(VK_OPERATION_DEFERRED_KHR);
        CASE_ENUM_TO_STR(VK_OPERATION_NOT_DEFERRED_KHR);
        CASE_ENUM_TO_STR(VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR);
        CASE_ENUM_TO_STR(VK_ERROR_COMPRESSION_EXHAUSTED_EXT);
        CASE_ENUM_TO_STR(VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT);
        // CASE_ENUM_TO_STR(VK_PIPELINE_BINARY_MISSING_KHR);
        // CASE_ENUM_TO_STR(VK_ERROR_NOT_ENOUGH_SPACE_KHR);
        CASE_ENUM_TO_STR(VK_RESULT_MAX_ENUM);
        CASE_ENUM_TO_STR(VK_ERROR_FEATURE_NOT_PRESENT);
        break;
    }
    return "";
}
inline std::string std::to_string(VkFormat v)
{
    switch (v) {

        CASE_ENUM_TO_STR(VK_FORMAT_UNDEFINED);
        CASE_ENUM_TO_STR(VK_FORMAT_R4G4_UNORM_PACK8);
        CASE_ENUM_TO_STR(VK_FORMAT_R4G4B4A4_UNORM_PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_B4G4R4A4_UNORM_PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_R5G6B5_UNORM_PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_B5G6R5_UNORM_PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_R5G5B5A1_UNORM_PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_B5G5R5A1_UNORM_PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_A1R5G5B5_UNORM_PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_R8_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R8_SNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R8_USCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R8_SSCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R8_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R8_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R8_SRGB);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8_SNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8_USCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8_SSCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8_SRGB);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8_SNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8_USCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8_SSCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8_SRGB);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8_SNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8_USCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8_SSCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8_SRGB);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8A8_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8A8_SNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8A8_USCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8A8_SSCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8A8_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8A8_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R8G8B8A8_SRGB);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8A8_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8A8_SNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8A8_USCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8A8_SSCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8A8_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8A8_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8A8_SRGB);
        CASE_ENUM_TO_STR(VK_FORMAT_A8B8G8R8_UNORM_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A8B8G8R8_SNORM_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A8B8G8R8_USCALED_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A8B8G8R8_SSCALED_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A8B8G8R8_UINT_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A8B8G8R8_SINT_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A8B8G8R8_SRGB_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A2R10G10B10_UNORM_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A2R10G10B10_SNORM_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A2R10G10B10_USCALED_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A2R10G10B10_SSCALED_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A2R10G10B10_UINT_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A2R10G10B10_SINT_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A2B10G10R10_UNORM_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A2B10G10R10_SNORM_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A2B10G10R10_USCALED_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A2B10G10R10_SSCALED_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A2B10G10R10_UINT_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_A2B10G10R10_SINT_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_R16_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R16_SNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R16_USCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R16_SSCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R16_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R16_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R16_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16_SNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16_USCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16_SSCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16_SNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16_USCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16_SSCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16A16_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16A16_SNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16A16_USCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16A16_SSCALED);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16A16_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16A16_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16B16A16_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_R32_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R32_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R32_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_R32G32_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R32G32_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R32G32_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_R32G32B32_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R32G32B32_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R32G32B32_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_R32G32B32A32_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R32G32B32A32_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R32G32B32A32_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_R64_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R64_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R64_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_R64G64_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R64G64_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R64G64_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_R64G64B64_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R64G64B64_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R64G64B64_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_R64G64B64A64_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R64G64B64A64_SINT);
        CASE_ENUM_TO_STR(VK_FORMAT_R64G64B64A64_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_B10G11R11_UFLOAT_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_E5B9G9R9_UFLOAT_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_D16_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_X8_D24_UNORM_PACK32);
        CASE_ENUM_TO_STR(VK_FORMAT_D32_SFLOAT);
        CASE_ENUM_TO_STR(VK_FORMAT_S8_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_D16_UNORM_S8_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_D24_UNORM_S8_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_D32_SFLOAT_S8_UINT);
        CASE_ENUM_TO_STR(VK_FORMAT_BC1_RGB_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC1_RGB_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC1_RGBA_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC1_RGBA_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC2_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC2_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC3_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC3_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC4_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC4_SNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC5_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC5_SNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC6H_UFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC6H_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC7_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_BC7_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_EAC_R11_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_EAC_R11_SNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_EAC_R11G11_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_EAC_R11G11_SNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_4x4_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_4x4_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_5x4_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_5x4_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_5x5_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_5x5_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_6x5_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_6x5_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_6x6_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_6x6_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_8x5_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_8x5_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_8x6_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_8x6_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_8x8_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_8x8_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_10x5_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_10x5_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_10x6_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_10x6_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_10x8_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_10x8_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_10x10_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_10x10_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_12x10_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_12x10_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_12x12_UNORM_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_12x12_SRGB_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_G8B8G8R8_422_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_B8G8R8G8_422_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_G8_B8R8_2PLANE_420_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_G8_B8R8_2PLANE_422_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_R10X6_UNORM_PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_R10X6G10X6_UNORM_2PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_R12X4_UNORM_PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_R12X4G12X4_UNORM_2PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G16B16G16R16_422_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_B16G16R16G16_422_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_G16_B16R16_2PLANE_420_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_G16_B16R16_2PLANE_422_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_G8_B8R8_2PLANE_444_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_G16_B16R16_2PLANE_444_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_A4R4G4B4_UNORM_PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_A4B4G4R4_UNORM_PACK16);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK);
        CASE_ENUM_TO_STR(VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK);
        // CASE_ENUM_TO_STR(VK_FORMAT_A1B5G5R5_UNORM_PACK16);
        // CASE_ENUM_TO_STR(VK_FORMAT_A8_UNORM);
        CASE_ENUM_TO_STR(VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG);
        CASE_ENUM_TO_STR(VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG);
        CASE_ENUM_TO_STR(VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG);
        CASE_ENUM_TO_STR(VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG);
        CASE_ENUM_TO_STR(VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG);
        CASE_ENUM_TO_STR(VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG);
        CASE_ENUM_TO_STR(VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG);
        CASE_ENUM_TO_STR(VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG);
        // CASE_ENUM_TO_STR(VK_FORMAT_R16G16_SFIXED5_NV);
        CASE_ENUM_TO_STR(VK_FORMAT_MAX_ENUM);
        CASE_ENUM_TO_STR(VK_FORMAT_R16G16_S10_5_NV);
        CASE_ENUM_TO_STR(VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR);
        CASE_ENUM_TO_STR(VK_FORMAT_A8_UNORM_KHR);
        break;
    }
    return "";
}

inline std::string std::to_string(VkColorSpaceKHR v)
{
    switch (v) {
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_SRGB_NONLINEAR_KHR);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_BT709_LINEAR_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_BT709_NONLINEAR_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_BT2020_LINEAR_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_HDR10_ST2084_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_DOLBYVISION_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_HDR10_HLG_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_PASS_THROUGH_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_DISPLAY_NATIVE_AMD);
        CASE_ENUM_TO_STR(VK_COLOR_SPACE_MAX_ENUM_KHR);
    }
    return "";
}

inline std::string std::to_string(VkPresentModeKHR v)
{
    switch (v) {
        CASE_ENUM_TO_STR(VK_PRESENT_MODE_IMMEDIATE_KHR);
        CASE_ENUM_TO_STR(VK_PRESENT_MODE_MAILBOX_KHR);
        CASE_ENUM_TO_STR(VK_PRESENT_MODE_FIFO_KHR);
        CASE_ENUM_TO_STR(VK_PRESENT_MODE_FIFO_RELAXED_KHR);
        CASE_ENUM_TO_STR(VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR);
        CASE_ENUM_TO_STR(VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR);
        // CASE_ENUM_TO_STR(VK_PRESENT_MODE_FIFO_LATEST_READY_EXT);
        CASE_ENUM_TO_STR(VK_PRESENT_MODE_MAX_ENUM_KHR);
        break;
    }
    return "";
}

inline std::string std::to_string(VkSharingMode v)
{
    switch (v) {
        CASE_ENUM_TO_STR(VK_SHARING_MODE_EXCLUSIVE);
        CASE_ENUM_TO_STR(VK_SHARING_MODE_CONCURRENT);
        CASE_ENUM_TO_STR(VK_SHARING_MODE_MAX_ENUM);
        break;
    }
    return "";
}
